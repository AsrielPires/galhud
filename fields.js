"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.select = exports.number = exports.radio = exports.text = exports.addBaseTypes = exports.addcbFmts = exports.cbFormats = exports.output = exports.input = exports.size = exports.set = exports.sort = exports.query = void 0;
const entity_1 = require("entity");
const inputs_1 = require("form/inputs");
const format_1 = require("format");
const scalar_1 = require("format/scalar");
const time_1 = require("format/time");
const galhui_1 = require("galhui");
const inutil_1 = require("inutil");
// export class Field<T extends FieldOpts = FieldOpts> implements IField {
//   constructor(public key: str, public tp: Key, public o: T = <T>{}) {
//     this.req = t(o.req);
//     this.edit = def(o.edit, set(this));
//     this.side = o.side;
//   }
// }
const field = (key, tp, opts) => (0, inutil_1.ex)({ key, tp }, opts);
const query = ({ query, tp }) => (0, inutil_1.def)(query, entity_1.fieldTypes[tp].query);
exports.query = query;
const sort = ({ sort, tp }) => (0, inutil_1.def)(sort, entity_1.fieldTypes[tp].sort);
exports.sort = sort;
const set = ({ set, tp }) => (0, inutil_1.def)(set, entity_1.fieldTypes[tp].set);
exports.set = set;
const size = ({ tp }) => entity_1.fieldTypes[tp].size() * galhui_1.$.rem;
exports.size = size;
const input = (f) => entity_1.fieldTypes[f.tp].input(f);
exports.input = input;
const output = (f, ctx) => entity_1.fieldTypes[f.tp].output(ctx, f);
exports.output = output;
// export const extendField = (base: Key, key: Key, type: FieldType) =>
//   types[key] = extend(type, types[base]);
const defFT = {
    sort: true,
    block: false,
    query: true,
    align: "left",
    set: true,
    output: ({ v, p }) => v == null ? p.null : v,
    size: () => 10
};
/**checkbox format */
exports.cbFormats = {};
const addcbFmts = () => (0, inutil_1.ex)(exports.cbFormats, {
    icon: (value) => (0, galhui_1.icon)((0, inutil_1.isV)(value) ?
        value ?
            { c: "_a" /* accept */, d: "check" } :
            { c: "_e" /* error */, d: "close" } :
        galhui_1.$.null()),
    /**yes | no */
    yn: (value) => (0, inutil_1.isV)(value) ? value ? galhui_1.w.yes : galhui_1.w.no : "",
    /**true | false */
    tf: (value) => (0, inutil_1.isV)(value) ? value ? galhui_1.w.true : galhui_1.w.false : "",
});
exports.addcbFmts = addcbFmts;
function addBaseTypes(types) {
    const addType = (key, type) => types[key] = (0, inutil_1.extend)(type, defFT);
    addType("text", {
        input: (i) => new inputs_1.TextInput(i),
        size: () => 12
    });
    addType("number", {
        output: ({ v, p }, o) => v == null ? p.null : (0, scalar_1.default)(v).fmt(o.fmt || p.numberFmt),
        input: (i) => new inputs_1.NumberInput(i),
        size: () => 7,
        align: "right"
    });
    addType("date", {
        output: ({ v, p }, o) => v == null ? p.null : (0, time_1.formatTime)((0, format_1.time)(v), o.fmt || p.dateFmt),
        input: ({ key, req, input }) => (0, inputs_1.date)(key, input, req)
    });
    addType("time", {
        output: ({ v, p }, o) => v == null ? p.null : (0, time_1.formatTime)((0, format_1.time)(v), o.fmt || p.timeFmt),
        input: ({ key, req }) => (0, inputs_1.time)(key, req)
    });
    addType("dt", {
        output: ({ v, p }, o) => v == null ? p.null : (0, time_1.formatTime)((0, format_1.time)(v), o.fmt),
        input: () => null
    });
    addType("check", {
        output: ({ v, p }, o) => exports.cbFormats[o.fmt || p.checkboxFmt](v),
        input: ({ key, req }) => (0, inputs_1.checkbox)(key, req)
    });
    addType("radio", {
        output: ({ v, p }, o) => v == null ? p.null : entity_1.$.enumView(o.enum, v),
        input: ({ key, req, enum: e }) => (0, inputs_1.radio)(key, entity_1.$.enum(e), req),
        size: () => 4
    });
}
exports.addBaseTypes = addBaseTypes;
const text = (key, opts = {}) => field(key, "text", opts);
exports.text = text;
const radio = (key, list, opts) => field(key, "radio", (0, inutil_1.ex)({}, { enum: list }, opts));
exports.radio = radio;
const number = (key, opts = {}) => field(key, "number", opts);
exports.number = number;
const select = (key, link, opts) => field(key, "link", (0, inutil_1.ex)({}, opts, { link }));
exports.select = select;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmllbGRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUFpRjtBQUVqRix3Q0FFcUI7QUFDckIsbUNBQThCO0FBQzlCLDBDQUFtQztBQUNuQyxzQ0FBeUM7QUFDekMsbUNBQTJDO0FBRzNDLG1DQUE4QztBQTZDOUMsMEVBQTBFO0FBQzFFLHdFQUF3RTtBQUN4RSwyQkFBMkI7QUFDM0IsMENBQTBDO0FBQzFDLDBCQUEwQjtBQUMxQixNQUFNO0FBQ04sSUFBSTtBQUNKLE1BQU0sS0FBSyxHQUFHLENBQTBCLEdBQVEsRUFBRSxFQUFPLEVBQUUsSUFBaUIsRUFBUyxFQUFFLENBQUMsSUFBQSxXQUFFLEVBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDL0csTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQVMsRUFBRSxFQUFFLENBQUMsSUFBQSxZQUFHLEVBQUMsS0FBSyxFQUFFLG1CQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7QUFBOUQsUUFBQSxLQUFLLFNBQXlEO0FBQ3BFLE1BQU0sSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFTLEVBQUUsRUFBRSxDQUFDLElBQUEsWUFBRyxFQUFDLElBQUksRUFBRSxtQkFBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQTFELFFBQUEsSUFBSSxRQUFzRDtBQUNoRSxNQUFNLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBUyxFQUFFLEVBQUUsQ0FBQyxJQUFBLFlBQUcsRUFBQyxHQUFHLEVBQUUsbUJBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUF0RCxRQUFBLEdBQUcsT0FBbUQ7QUFDNUQsTUFBTSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEVBQUUs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